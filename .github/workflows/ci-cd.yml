name: CI/CD Pipeline

on:
  push:
    branches: [ development, release ]
  pull_request:
    branches: [ development ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v
        
    - name: Build success
      if: success()
      run: echo "‚úÖ All tests passed!"

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Simulate deployment
      run: |
        echo "üöÄ Starting deployment..."
        echo "Deploying commit: ${{ github.sha }}"
        echo "‚úÖ Deployment completed!"

    documentation:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'
    permissions:
      contents: write  # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: Generate automated documentation
      run: |
        echo "üìö Generating documentation..."
        mkdir -p docs
        current_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        echo "# üöÄ Automated Build Report" > docs/build_report.md
        echo "" >> docs/build_report.md
        echo "## üìä Build Information" >> docs/build_report.md
        echo "- **Build Date:** $current_time" >> docs/build_report.md
        echo "- **Commit:** [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> docs/build_report.md
        echo "- **Branch:** ${{ github.ref }}" >> docs/build_report.md
        echo "- **Workflow Run:** [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> docs/build_report.md
        echo "" >> docs/build_report.md
        echo "## ‚úÖ Test Status" >> docs/build_report.md
        echo "All tests passed successfully! üéâ" >> docs/build_report.md
        echo "" >> docs/build_report.md
        echo "## üìà Code Metrics" >> docs/build_report.md
        echo "- **Python Files:** $(find . -name '*.py' -not -path './.git/*' | wc -l)" >> docs/build_report.md
        echo "- **Test Files:** $(find tests -name '*.py' | wc -l)" >> docs/build_report.md
        echo "- **Total Lines of Code:** $(find . -name '*.py' -not -path './.git/*' | xargs wc -l | tail -1 | awk '{print $1}')" >> docs/build_report.md
        echo "" >> docs/build_report.md
        echo "---" >> docs/build_report.md
        echo "*Automatically generated by GitHub Actions*" >> docs/build_report.md
        
        echo "‚úÖ Documentation generated successfully"
        
    - name: Commit and push documentation
      run: |
        echo "üöÄ Committing documentation updates..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        git add docs/
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞
        if git diff --staged --quiet; then
          echo "üìù No changes to commit in documentation"
        else
          git commit -m "üìö docs: auto-update build report for ${{ github.sha }}"
          echo "‚úÖ Changes committed successfully"
          git push
          echo "üöÄ Documentation pushed to repository"
        fi
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç job –≤ –≤–∞—à .github/workflows/ci-cd.yml
  auto-merge:
    needs: [build-and-test, documentation]  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    
    steps:
    - name: Check if PR is mergeable
      id: check-merge
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PR –º–æ–∂–Ω–æ —Å–º–µ—Ä–∂–∏—Ç—å
          if (pr.mergeable && pr.mergeable_state === 'clean') {
            console.log('‚úÖ PR is ready for auto-merge');
            core.setOutput('mergeable', 'true');
          } else {
            console.log('‚ùå PR is not ready for auto-merge. Status:', pr.mergeable_state);
            core.setOutput('mergeable', 'false');
          }
    
    - name: Auto-merge PR
      if: steps.check-merge.outputs.mergeable == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          try {
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              merge_method: 'squash'  // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 'merge' –∏–ª–∏ 'rebase'
            });
            console.log('‚úÖ PR auto-merged successfully!');
          } catch (error) {
            console.log('‚ùå Auto-merge failed:', error.message);
          }